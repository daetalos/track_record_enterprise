// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // CRITICAL: Multiple binary targets prevent Docker deployment crashes
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Authentication relationships
  accounts Account[]
  sessions Session[]
  
  // Club relationships
  userClubs UserClub[]

  @@map("users")
}

// Account model for OAuth and other authentication providers
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String   @db.VarChar(50)
  provider          String   @db.VarChar(50)
  providerAccountId String   @db.VarChar(255)
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?  @db.VarChar(50)
  scope             String?  @db.Text
  id_token          String?  @db.Text
  session_state     String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
  @@map("accounts")
}

// Session model for session management
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @db.VarChar(255)
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionToken])
  @@index([expires])
  @@map("sessions")
}

// Verification token model for email verification
model VerificationToken {
  identifier String   @db.VarChar(255)
  token      String   @unique @db.VarChar(255)
  expires    DateTime

  @@unique([identifier, token])
  @@index([identifier])
  @@index([token])
  @@index([expires])
  @@map("verification_tokens")
}

// Club model for multi-club context management
model Club {
  id          String   @id @default(cuid())
  name        String   @unique @db.VarChar(255)
  description String?  @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Club relationships
  userClubs   UserClub[]
  ageGroups   AgeGroup[]
  athletes    Athlete[]

  @@index([name])
  @@index([isActive])
  @@index([isActive, createdAt])
  @@map("clubs")
}

// UserClub junction model for many-to-many user-club relationships
model UserClub {
  id        String   @id @default(cuid())
  userId    String
  clubId    String
  role      ClubRole @default(MEMBER)
  isActive  Boolean  @default(true)
  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  club      Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)

  // Ensure a user can only have one relationship per club
  @@unique([userId, clubId])
  @@index([userId])
  @@index([clubId])
  @@index([userId, isActive])
  @@index([clubId, isActive])
  @@map("user_clubs")
}

// Enum for club roles
enum ClubRole {
  MEMBER
  ADMIN
  OWNER
}

// Gender model for athlete categorization
model Gender {
  id      String @id @default(cuid())
  name    String @unique @db.VarChar(8)     // Male, Female
  initial String @unique @db.VarChar(1)     // M, F
  
  // Relationships
  athletes Athlete[]

  @@index([name])
  @@index([initial])
  @@map("genders")
}

// AgeGroup model for competition categorization
model AgeGroup {
  id       String @id @default(cuid())
  clubId   String
  name     String @db.VarChar(32)          // U9, U10, U11, Junior, Senior, Masters
  ordinal  Int                             // For proper sorting (U9=1, U10=2, etc.)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  club     Club      @relation(fields: [clubId], references: [id], onDelete: Cascade)
  athletes Athlete[]

  // Business constraints
  @@unique([clubId, name])  // Age group names unique within each club
  @@index([clubId])
  @@index([clubId, ordinal])
  @@index([ordinal])
  @@map("age_groups")
}

// Athlete model for individual athlete records
model Athlete {
  id        String   @id @default(cuid())
  clubId    String
  genderId  String
  firstName String   @db.VarChar(64)
  lastName  String   @db.VarChar(64)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  club      Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  gender    Gender   @relation(fields: [genderId], references: [id], onDelete: Restrict)
  ageGroup  AgeGroup? @relation(fields: [ageGroupId], references: [id], onDelete: SetNull)
  
  // Optional age group assignment
  ageGroupId String?

  // Business constraints
  @@unique([clubId, firstName, lastName])  // Prevent duplicate athletes within club
  @@index([clubId])
  @@index([genderId])
  @@index([ageGroupId])
  @@index([clubId, firstName])
  @@index([clubId, lastName])
  @@index([clubId, firstName, lastName])
  @@map("athletes")
}

// Season model for organizing disciplines across athletics seasons
model Season {
  id          String   @id @default(cuid())
  name        String   @unique @db.VarChar(64)  // Track & Field, Indoors, Cross Country
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  disciplines Discipline[]

  @@index([name])
  @@map("seasons")
}

// Discipline model for athletics events and competitions
model Discipline {
  id               String   @id @default(cuid())
  seasonId         String
  name             String   @db.VarChar(128)     // 100m, 200m, High Jump, Shot Put, 4x100m Relay
  description      String?  @db.Text
  
  // Discipline type classification (mutually exclusive)
  isTimed          Boolean  @default(false)      // True for timed events (sprints, distance)
  isMeasured       Boolean  @default(false)      // True for measured events (jumps, throws)
  
  // Performance comparison direction
  isSmallerBetter  Boolean  @default(false)      // True for timed events (smaller time = better)
  
  // Team event configuration
  teamSize         Int?                          // Number of team members for relay events (null for individual)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  season           Season   @relation(fields: [seasonId], references: [id], onDelete: Cascade)

  // Business constraints
  @@unique([seasonId, name])  // Discipline names unique within each season
  @@index([seasonId])
  @@index([seasonId, name])
  @@index([isTimed])
  @@index([isMeasured])
  @@map("disciplines")
}

// Medal model for competition awards and recognition
model Medal {
  id       String @id @default(cuid())
  position Int    @unique               // Position 1-12
  name     String @db.VarChar(16)       // Gold, Silver, Bronze
  
  // Business constraints for medal positions
  // Position 1 = Gold, Position 2 = Silver, Position 3 = Bronze, Positions 4-12 = Bronze
  
  @@index([position])
  @@map("medals")
}
